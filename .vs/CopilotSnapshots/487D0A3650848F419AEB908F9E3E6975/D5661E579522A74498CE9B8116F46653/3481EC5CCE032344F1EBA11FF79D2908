@page "/counter"
@rendermode InteractiveServer

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="kaj-typewriter">
    @if (step > 0)
    {
        <span class="kaj-typewriter-letter" style="margin-left:0em;">@kDisplay</span>
    }
    @if (step > 1)
    {
        <span class="kaj-typewriter-letter" style="margin-left:1.7em;">@aDisplay</span>
    }
    @if (step > 2)
    {
        <span class="kaj-typewriter-letter" style="margin-left:3.4em;">@jDisplay</span>
    }
</div>

@code {
    private int currentCount = 0;

    private string kDisplay = "";
    private string aDisplay = "";
    private string jDisplay = "";

    private int step = 0;
    private int subStep = 0;
    private System.Threading.Timer? timer;

    private string kFull => "K = Kevin";
    private string aFull => "A = Axel";
    private string jFull => "J = Jakob";

    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(_ =>
        {
            AnimateTypewriter();
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    private void AnimateTypewriter()
    {
        if (step == 0)
        {
            if (subStep < kFull.Length)
            {
                kDisplay = kFull.Substring(0, subStep + 1);
                subStep++;
            }
            else
            {
                step = 1;
                subStep = 0;
            }
        }
        else if (step == 1)
        {
            if (subStep < aFull.Length)
            {
                aDisplay = aFull.Substring(0, subStep + 1);
                subStep++;
            }
            else
            {
                step = 2;
                subStep = 0;
            }
        }
        else if (step == 2)
        {
            if (subStep < jFull.Length)
            {
                jDisplay = jFull.Substring(0, subStep + 1);
                subStep++;
            }
            else
            {
                step = 3;
                timer?.Dispose();
            }
        }
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

<style>
    .kaj-typewriter {
        margin-top: 2.5rem;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        min-height: 10em;
        user-select: none;
        font-size: 2.2em;
        font-weight: bold;
        font-family: 'Segoe UI', Arial, sans-serif;
    }

    .kaj-typewriter-letter {
        color: #1976d2;
        display: block;
        transition: opacity 0.2s;
    }

        .kaj-typewriter-letter:nth-child(2) {
            color: #ff9800;
        }

        .kaj-typewriter-letter:nth-child(3) {
            color: #43a047;
        }
</style>