@page "/counter"
@rendermode InteractiveServer

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="kaj-typewriter">
    <span class="kaj-typewriter-letter" style="margin-left:0em;">
        K =
        @if (phase == 0)
        {
            @for (int i = 0; i < kName.Length; i++)
            {
                <span class="typewriter-letter-container">
                    <span class="flame"></span>
                </span>
            }
        }
        else if (phase == 1)
        {
            @for (int i = 0; i < kName.Length; i++)
            {
                <span class="typewriter-letter-container">
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                </span>
            }
        }
        else
        {
            @foreach (var tuple in kDisplay.Select((c, i) => (c, i)))
            {
                var c = tuple.c;
                var i = tuple.i;
                <span class="typewriter-letter-container">
                    <span class="steam steam1" style="animation-delay:@($"{i * 0.08}s")"></span>
                    <span class="steam steam2" style="animation-delay:@($"{i * 0.08 + 0.08}s")"></span>
                    <span class="steam steam3" style="animation-delay:@($"{i * 0.08 + 0.16}s")"></span>
                    <span class="fade-in" style="animation-delay:@($"{i * 0.08}s")">@c</span>
                </span>
            }
            @if (step == 0)
            {
                <span class="typewriter-cursor">|</span>
            }
        }
    </span>
    <span class="kaj-typewriter-letter" style="margin-left:1.7em;">
        A =
        @if (phase == 0)
        {
            @for (int i = 0; i < aName.Length; i++)
            {
                <span class="typewriter-letter-container">
                    <span class="flame"></span>
                </span>
            }
        }
        else if (phase == 1)
        {
            @for (int i = 0; i < aName.Length; i++)
            {
                <span class="typewriter-letter-container">
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                </span>
            }
        }
        else
        {
            @foreach (var tuple in aDisplay.Select((c, i) => (c, i)))
            {
                var c = tuple.c;
                var i = tuple.i;
                <span class="typewriter-letter-container">
                    <span class="steam steam1" style="animation-delay:@($"{i * 0.08}s")"></span>
                    <span class="steam steam2" style="animation-delay:@($"{i * 0.08 + 0.08}s")"></span>
                    <span class="steam steam3" style="animation-delay:@($"{i * 0.08 + 0.16}s")"></span>
                    <span class="fade-in" style="animation-delay:@($"{i * 0.08}s")">@c</span>
                </span>
            }
            @if (step == 1)
            {
                <span class="typewriter-cursor">|</span>
            }
        }
    </span>
    <span class="kaj-typewriter-letter" style="margin-left:3.4em;">
        J =
        @if (phase == 0)
        {
            @for (int i = 0; i < jName.Length; i++)
            {
                <span class="typewriter-letter-container">
                    <span class="flame"></span>
                </span>
            }
        }
        else if (phase == 1)
        {
            @for (int i = 0; i < jName.Length; i++)
            {
                <span class="typewriter-letter-container">
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                </span>
            }
        }
        else
        {
            @foreach (var tuple in jDisplay.Select((c, i) => (c, i)))
            {
                var c = tuple.c;
                var i = tuple.i;
                <span class="typewriter-letter-container">
                    <span class="steam steam1" style="animation-delay:@($"{i * 0.08}s")"></span>
                    <span class="steam steam2" style="animation-delay:@($"{i * 0.08 + 0.08}s")"></span>
                    <span class="steam steam3" style="animation-delay:@($"{i * 0.08 + 0.16}s")"></span>
                    <span class="fade-in" style="animation-delay:@($"{i * 0.08}s")">@c</span>
                </span>
            }
            @if (step == 2)
            {
                <span class="typewriter-cursor">|</span>
            }
        }
    </span>
</div>

@code {
    private int currentCount = 0;

    private string kDisplay = "";
    private string aDisplay = "";
    private string jDisplay = "";

    private int step = 0;
    private int subStep = 0;
    private int phase = 0; // 0 = vlammen, 1 = rook, 2 = rook+letters
    private System.Threading.Timer? timer;

    private string kName => "Kevin";
    private string aName => "Axel";
    private string jName => "Jakob";

    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(_ =>
        {
            if (phase == 0)
            {
                phase = 1;
                InvokeAsync(StateHasChanged);
                timer?.Change(1200, System.Threading.Timeout.Infinite); // 1.2s rook
                return;
            }
            if (phase == 1)
            {
                phase = 2;
                InvokeAsync(StateHasChanged);
                timer?.Change(200, 200); // start typewriter
                return;
            }
            AnimateTypewriter();
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    private void AnimateTypewriter()
    {
        if (step == 0)
        {
            if (subStep < kName.Length)
            {
                kDisplay += kName[subStep];
                subStep++;
            }
            else
            {
                step = 1;
                subStep = 0;
            }
        }
        else if (step == 1)
        {
            if (subStep < aName.Length)
            {
                aDisplay += aName[subStep];
                subStep++;
            }
            else
            {
                step = 2;
                subStep = 0;
            }
        }
        else if (step == 2)
        {
            if (subStep < jName.Length)
            {
                jDisplay += jName[subStep];
                subStep++;
            }
            else
            {
                step = 3;
                timer?.Dispose();
                // Reset alles voor een loop
                phase = 0;
                step = 0;
                subStep = 0;
                kDisplay = "";
                aDisplay = "";
                jDisplay = "";
                // Start opnieuw na korte pauze
                timer = new System.Threading.Timer(_ =>
                {
                    phase = 1;
                    InvokeAsync(StateHasChanged);
                }, null, 1800, System.Threading.Timeout.Infinite);
            }
        }
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}