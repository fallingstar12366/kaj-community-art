@page "/counter"
@rendermode InteractiveServer

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="kaj-typewriter">
    <span class="kaj-typewriter-letter" style="margin-left:0em;">
        K =
        @for (int i = 0; i < kName.Length; i++)
        {
            <span class="typewriter-letter-container">
                @if (phase == 0)
                {
                    <span class="flame"></span>
                }
                else if (phase == 1)
                {
                    <span class="flame"></span>
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                }
                else if (phase == 2)
                {
                    <span class="flame"></span>
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                    @if (i < kDisplay.Length)
                    {
                        <span class="fade-in" style="animation-delay:@($"{i * 0.08}s")">@kDisplay[i]</span>
                    }
                }
                else if (phase == 3)
                {
                    // Rook blijft bij alle namen zolang NIET alle namen klaar zijn
                    @if (!(kDisplay.Length == kName.Length && aDisplay.Length == aName.Length && jDisplay.Length == jName.Length))
                    {
                        <span class="steam steam1"></span>
                        <span class="steam steam2"></span>
                        <span class="steam steam3"></span>
                    }
                    @if (i < kDisplay.Length)
                    {
                        <span class="fade-in">@kDisplay[i]</span>
                    }
                }
            </span>
        }
        @if (step == 0 && phase == 2)
        {
            <span class="typewriter-cursor">|</span>
        }
    </span>
    <span class="kaj-typewriter-letter" style="margin-left:1.7em;">
        A =
        @for (int i = 0; i < aName.Length; i++)
        {
            <span class="typewriter-letter-container">
                @if (phase == 0)
                {
                    <span class="flame"></span>
                }
                else if (phase == 1)
                {
                    <span class="flame"></span>
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                }
                else if (phase == 2)
                {
                    <span class="flame"></span>
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                    @if (i < aDisplay.Length)
                    {
                        <span class="fade-in" style="animation-delay:@($"{i * 0.08}s")">@aDisplay[i]</span>
                    }
                }
                else if (phase == 3)
                {
                    @if (!(kDisplay.Length == kName.Length && aDisplay.Length == aName.Length && jDisplay.Length == jName.Length))
                    {
                        <span class="steam steam1"></span>
                        <span class="steam steam2"></span>
                        <span class="steam steam3"></span>
                    }
                    @if (i < aDisplay.Length)
                    {
                        <span class="fade-in">@aDisplay[i]</span>
                    }
                }
            </span>
        }
        @if (step == 1 && phase == 2)
        {
            <span class="typewriter-cursor">|</span>
        }
    </span>
    <span class="kaj-typewriter-letter" style="margin-left:3.4em;">
        J =
        @for (int i = 0; i < jName.Length; i++)
        {
            <span class="typewriter-letter-container">
                @if (phase == 0)
                {
                    <span class="flame"></span>
                }
                else if (phase == 1)
                {
                    <span class="flame"></span>
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                }
                else if (phase == 2)
                {
                    <span class="flame"></span>
                    <span class="steam steam1"></span>
                    <span class="steam steam2"></span>
                    <span class="steam steam3"></span>
                    @if (i < jDisplay.Length)
                    {
                        <span class="fade-in" style="animation-delay:@($"{i * 0.08}s")">@jDisplay[i]</span>
                    }
                }
                else if (phase == 3)
                {
                    @if (!(kDisplay.Length == kName.Length && aDisplay.Length == aName.Length && jDisplay.Length == jName.Length))
                    {
                        <span class="steam steam1"></span>
                        <span class="steam steam2"></span>
                        <span class="steam steam3"></span>
                    }
                    @if (i < jDisplay.Length)
                    {
                        <span class="fade-in">@jDisplay[i]</span>
                    }
                }
            </span>
        }
        @if (step == 2 && phase == 2)
        {
            <span class="typewriter-cursor">|</span>
        }
    </span>
</div>

@code {
    private int currentCount = 0;

    private string kDisplay = "";
    private string aDisplay = "";
    private string jDisplay = "";

    private int step = 0;
    private int subStep = 0;
    private int phase = 0; // 0 = vlammen, 1 = vlammen+rook, 2 = vlammen+rook+letters, 3 = alleen letters
    private System.Threading.Timer? timer;

    private string kName => "Kevin";
    private string aName => "Axel";
    private string jName => "Jakob";

    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(_ =>
        {
            if (phase == 0)
            {
                phase = 1;
                InvokeAsync(StateHasChanged);
                timer?.Change(1200, System.Threading.Timeout.Infinite); // 1.2s vlammen+rook
                return;
            }
            if (phase == 1)
            {
                phase = 2;
                InvokeAsync(StateHasChanged);
                timer?.Change(80, 80); // start typewriter sneller
                return;
            }
            if (phase == 2)
            {
                AnimateTypewriter();
                InvokeAsync(StateHasChanged);
            }
        }, null, 0, 80); // snellere rook
    }

    private void AnimateTypewriter()
    {
        if (step == 0)
        {
            if (subStep < kName.Length)
            {
                kDisplay += kName[subStep];
                subStep++;
            }
            else
            {
                step = 1;
                subStep = 0;
            }
        }
        else if (step == 1)
        {
            if (subStep < aName.Length)
            {
                aDisplay += aName[subStep];
                subStep++;
            }
            else
            {
                step = 2;
                subStep = 0;
            }
        }
        else if (step == 2)
        {
            if (subStep < jName.Length)
            {
                jDisplay += jName[subStep];
                subStep++;
            }
            else
            {
                step = 3;
                phase = 3;
                // Blijf phase 3 tonen tot alle namen klaar zijn
                if (kDisplay.Length == kName.Length && aDisplay.Length == aName.Length && jDisplay.Length == jName.Length)
                {
                    timer?.Dispose();
                    timer = new System.Threading.Timer(_ =>
                    {
                        phase = 0;
                        step = 0;
                        subStep = 0;
                        kDisplay = "";
                        aDisplay = "";
                        jDisplay = "";
                        InvokeAsync(StateHasChanged);
                        timer = new System.Threading.Timer(__ =>
                        {
                            phase = 1;
                            InvokeAsync(StateHasChanged);
                        }, null, 1200, System.Threading.Timeout.Infinite);
                    }, null, 1800, System.Threading.Timeout.Infinite);
                }
            }
        }
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}